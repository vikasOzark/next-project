// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum Role {
    User
    Admin
}

enum Status {
    PENDING
    CLOSE
    REJECT
    HOLD
}

model User {
    id                 String       @id @default(auto()) @map("_id") @db.ObjectId
    first_name         String
    last_name          String?
    email              String       @unique
    contact_number     String?      @unique
    parent_user        String?
    departmentMemberId String?
    role               Role         @default(User)
    password           String
    Department         Department[]
    Tags               Tags[]
    Tickets            Tickets[]
    Profile            Profile?
    Department         Department[]
    Department         Department[]
}

model Department {
    id             String @id @default(auto()) @map("_id") @db.ObjectId
    name           String @unique
    createdById    User   @relation(name: "createdBy", fields: [userId], references: [id])
    userId         String @db.ObjectId
    assingedTo     User   @relation(name: "assignedTo", fields: [assignedUserId], references: [id])
    assignedUserId String @db.ObjectId

    updated_at DateTime  @updatedAt
    createdAt  DateTime  @default(now())
    Tickets    Tickets[]
    User       User      @relation(fields: [userId], references: [id])
}

model Tags {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    title       String    @unique
    color       String    @default("#a9acb0")
    createdAt   DateTime  @default(now())
    createdById User      @relation(fields: [userId], references: [id])
    userId      String    @db.ObjectId
    tickets     Tickets[] @relation(fields: [ticketId], references: [id])
    ticketId    String[]  @db.ObjectId
}

model Tickets {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    taskTitle    String     @unique
    ticketDetil  String?
    status       Status     @default(PENDING)
    department   Department @relation(fields: [departmentId], references: [id])
    createdById  User       @relation(fields: [userId], references: [id])
    tags         Tags[]     @relation(references: [id], fields: [tagsId])
    tagsId       String[]   @db.ObjectId
    departmentId String     @db.ObjectId
    userId       String     @db.ObjectId
    createdAt    DateTime   @default(now())
}

model UserNew {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique // <-- add unique attribute
    profile   Profile? @relation(fields: [profileId], references: [id])
    profileId String?  @db.ObjectId
}

model Profile {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    user      User      @relation(fields: [userEmail], references: [email])
    userEmail String    @unique
    UserNew   UserNew[]
}
