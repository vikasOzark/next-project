// suyash.d
// netweb@123
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum Role {
    User
    Admin
}

enum Status {
    PENDING
    CLOSE
    REJECT
    HOLD
}

model User {
    id                 String  @id @default(auto()) @map("_id") @db.ObjectId
    first_name         String
    last_name          String?
    email              String  @unique
    contact_number     String? @unique
    departmentMemberId String?
    role               Role    @default(User)
    password           String
    Tags               Tags[]

    parentUserId String? @unique @db.ObjectId
    parent       User?   @relation("parentUser", fields: [parentUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentor     User[]  @relation("parentUser")

    Department          Department[] @relation(name: "createdBy")
    Tickets             Tickets[]
    ticketAssingedUsers Tickets[]    @relation(name: "assingedUser")
    Notes               Notes[]
}

model Department {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String @unique
    createdById User   @relation(name: "createdBy", fields: [userId], references: [id])
    userId      String @db.ObjectId

    updated_at DateTime  @updatedAt
    createdAt  DateTime  @default(now())
    Tickets    Tickets[]
}

model Tags {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    title       String    @unique
    color       String    @default("#a9acb0")
    createdAt   DateTime  @default(now())
    createdById User      @relation(fields: [userId], references: [id])
    userId      String    @db.ObjectId
    tickets     Tickets[] @relation(fields: [ticketId], references: [id])
    ticketId    String[]  @db.ObjectId
}

model Tickets {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    taskTitle    String     @unique
    ticketDetil  String?
    status       Status     @default(PENDING)
    department   Department @relation(fields: [departmentId], references: [id])
    createdById  User       @relation(fields: [userId], references: [id])
    tags         Tags[]     @relation(references: [id], fields: [tagsId])
    tagsId       String[]   @db.ObjectId
    departmentId String     @db.ObjectId
    userId       String     @db.ObjectId
    createdAt    DateTime   @default(now())
    updated_at   DateTime?  @updatedAt

    assingedUser   User?   @relation(name: "assingedUser", fields: [assingedUserId], references: [id])
    assingedUserId String? @db.ObjectId

    note   Notes[]  @relation(references: [id], fields: [noteId])
    noteId String[] @db.ObjectId
}

model Notes {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    note      String
    createdAt DateTime @default(now())

    tickets  Tickets[] @relation(fields: [ticketId], references: [id])
    ticketId String[]  @db.ObjectId

    createdBy User   @relation(fields: [userId], references: [id])
    userId    String @db.ObjectId
}
