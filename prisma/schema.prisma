generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum Role {
    User
    Admin
}

enum Status {
    PENDING
    CLOSE
    REJECT
    HOLD
    PROCESS
}

enum PLAN {
    STARTER
    PREMIUM
}

enum ON_BORDING_STATUS {
    PENDING
    COMPLETED
    ATTEMPTS_BUT_NO_COMPLITED
    NEVER_ATTEMPTS
    PAYMENT_FAILD
    ALREADY_MEMBER
}

model User {
    id                 String  @id @default(auto()) @map("_id") @db.ObjectId
    first_name         String
    last_name          String?
    email              String  @unique
    contact_number     String? @unique
    departmentMemberId String?
    role               Role    @default(User)
    password           String
    Tags               Tags[]
    uniqueCompanyId    String?

    plan        PLAN?
    planExpairy DateTime?
    planStarted DateTime?

    onbordingStatus ON_BORDING_STATUS @default(PENDING)

    isSuperuser Boolean  @default(false)
    isDisabled  Boolean? @default(false)

    parentUserId String? @unique @db.ObjectId
    parent       User?   @relation("parentUser", fields: [parentUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentor     User[]  @relation("parentUser")

    Department Department[] @relation(name: "createdBy")
    Tickets    Tickets[]

    ticketAssingedUsers Tickets[] @relation(name: "assingedUser")
    Notes               Notes[]

    createdAt DateTime    @default(now())
    updatedAt DateTime?   @updatedAt
    Activity  Activity[]
    Payment   Payment[]
    UserNotes UserNotes[]
}

// model CompanyDetail {
//     id              String  @id @default(auto()) @map("_id") @db.ObjectId
//     uniqueCompanyId String?
//     teamSize        String?
//     UserNotes UserNotes[] @relation(name: "noteCreatedBy")
// }

model Department {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String @unique
    createdById User   @relation(name: "createdBy", fields: [userId], references: [id])
    userId      String @db.ObjectId

    updated_at DateTime  @updatedAt
    createdAt  DateTime  @default(now())
    Tickets    Tickets[]
}

model Tags {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    title       String    @unique
    color       String    @default("#a9acb0")
    createdAt   DateTime  @default(now())
    createdById User      @relation(fields: [userId], references: [id])
    userId      String    @db.ObjectId
    tickets     Tickets[] @relation(fields: [ticketId], references: [id])
    ticketId    String[]  @db.ObjectId
}

model Tickets {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    taskTitle    String     @unique
    ticketDetil  String?
    status       Status     @default(PENDING)
    department   Department @relation(fields: [departmentId], references: [id])
    createdById  User       @relation(fields: [userId], references: [id])
    tags         Tags[]     @relation(references: [id], fields: [tagsId])
    tagsId       String[]   @db.ObjectId
    departmentId String     @db.ObjectId
    userId       String     @db.ObjectId
    createdAt    DateTime   @default(now())
    updated_at   DateTime?  @updatedAt

    assingedUser   User?   @relation(name: "assingedUser", fields: [assingedUserId], references: [id])
    assingedUserId String? @db.ObjectId

    note   Notes[]  @relation(references: [id], fields: [noteId])
    noteId String[] @db.ObjectId

    isMerged Boolean @default(false)
    isReaded Boolean @default(false)

    mergedTickets Tickets[] @relation("mergeTickets", fields: [mergeTicketId], references: [id])
    mergeTicketId String[]  @db.ObjectId

    mergedTicket Tickets[] @relation("mergeTickets", fields: [mergeId], references: [id])
    mergeId      String[]  @db.ObjectId

    startDate   DateTime?
    endDate     DateTime?
    UserNotes   UserNotes? @relation(fields: [userNotesId], references: [id])
    userNotesId String?    @db.ObjectId
}

model Notes {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    note      String
    createdAt DateTime @default(now())

    tickets  Tickets[] @relation(fields: [ticketId], references: [id])
    ticketId String[]  @db.ObjectId

    createdBy User   @relation(fields: [userId], references: [id])
    userId    String @db.ObjectId
}

enum ActivityType {
    TicketCreation
    UserUpdate
    DepartmentCreation
    TicketStatusUpdate
    DeleteTicket
    MergeTicket
}

enum ModelRef {
    Tickets
    User
    Department
    Tags
    Notes
}

model Activity {
    id               String        @id @default(auto()) @map("_id") @db.ObjectId
    createdBy        User          @relation(fields: [userId], references: [id])
    userId           String        @db.ObjectId
    activityType     ActivityType?
    modelRef         ModelRef?
    activityTargetId String?
    createdAt        DateTime      @default(now())
}

enum PAYMENT_STATUS {
    SUCCESS
    FAILED
    PENDING
    UNKNOWN
}

model Payment {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    uniqueCompanyId String?
    createdBy       User           @relation(fields: [userId], references: [id])
    userId          String         @db.ObjectId
    transactionId   String
    paymentMode     String
    paymentResponse Json?
    amount          String
    paymentStatus   PAYMENT_STATUS @default(PENDING)
    createdAt       DateTime       @default(now())
}

model UserNotes {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    title        String      @default("Untitled")
    content      String?
    userId       String      @db.ObjectId
    createdBy    User        @relation(fields: [userId], references: [id], name: "noteCreatedBy")
    ticketsRef   Tickets[]
    createdAt    DateTime    @default(now())
    parentNoteId String?     @unique @db.ObjectId
    parent       UserNotes?  @relation("parentNotes", fields: [parentNoteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentor     UserNotes[] @relation("parentNotes")
}
